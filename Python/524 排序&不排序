#整体思路：
#1.先排序，由大到小&原序
#2.再按顺序找到子串
class Solution:
    def findLongestWord(self, s: str, dictionary: List[str]) -> str:
        dictionary.sort(key=lambda x : (-len(x), x))#lambda第一个参数是长度逆序（长到短），第二个参数是同等长度的按照原来字典顺序排序
        
        def judge(word):#判断字典中的某个单词是否在给定的s:string中，查到return True，反之False
            i = 0
            for c in word:
                index = s.find(c, i)#第一个参数是要查找字母，第二个参数是查找起始下标位置。查到返回下标，查不到返回-1
                if index == -1:
                    return False
                i = index + 1#接着后面继续查
            return True
            
        for word in dictionary:#字典中所有word中，有无被s包含的word
            if judge(word):
                return word
        return ""

#整体思路：
#2.若长度比longWord小/长度等且longWord字典序小，则continue，否则 判断是否为字串，是则记录
class Solution:
    def findLongestWord(self, s: str, dictionary: List[str]) -> str:
        def isSubString(word):
            index = 0
            for c in word:
                index = s.find(c, index)
                if index < 0:
                    return False
                index += 1
            return True
        
        longWord = ""
        for word in dictionary:
            lw, ll = len(word), len(longWord)
            if lw<ll or (lw==ll and longWord<word):
                continue
            if isSubString(word):
                longWord = word
        return longWord
        
            
        
        
        
